name: Build & Release YTGet

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag Name to Release'
        required: true

permissions:
  contents: write

jobs:
  build:
    name: Build (${{ matrix.os }} - ${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    strategy:
      matrix:
        include:
          - os: windows-latest
            arch: x86_64
          - os: ubuntu-latest
            arch: x86_64
          - os: macos-latest
            arch: arm64
          - os: macos-13
            arch: x86_64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Download yt-dlp
        if: runner.os != 'macOS'
        shell: bash
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            curl -L https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp.exe -o yt-dlp.exe
          elif [[ "$RUNNER_OS" == "Linux" ]]; then
            curl -L https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp -o yt-dlp
            chmod +x yt-dlp
          fi

      - name: Download ffmpeg & ffprobe
        shell: bash
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            curl -L https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-essentials.zip -o ffmpeg.zip
            powershell -Command "Expand-Archive -Path ffmpeg.zip -DestinationPath ."
            cp "$(powershell -Command "(Get-ChildItem -Recurse -Filter ffmpeg.exe | Select-Object -First 1).FullName")" .
            cp "$(powershell -Command "(Get-ChildItem -Recurse -Filter ffprobe.exe | Select-Object -First 1).FullName")" .
          elif [[ "$RUNNER_OS" == "Linux" ]]; then
            sudo apt-get update
            sudo apt-get install -y ffmpeg
            cp $(which ffmpeg) .
            cp $(which ffprobe) .
          else
            curl -L https://evermeet.cx/ffmpeg/ffmpeg-8.0.zip -o ffmpeg.zip
            unzip ffmpeg.zip
            chmod +x ffmpeg
            curl -L https://evermeet.cx/ffmpeg/ffprobe-8.0.zip -o ffprobe.zip
            unzip ffprobe.zip
            chmod +x ffprobe
          fi

      - name: Download PhantomJS (per-OS)
        shell: bash
        run: |
          WIN_URL="https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-2.1.1-windows.zip"
          MAC_URL="https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-2.1.1-macosx.zip"
          LINUX_URL="https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-2.1.1-linux-x86_64.tar.bz2"

          if [[ "$RUNNER_OS" == "Windows" ]]; then
            echo "Downloading PhantomJS for Windows"
            curl -L "$WIN_URL" -o phantomjs-windows.zip
            powershell -Command "Expand-Archive -Path phantomjs-windows.zip -DestinationPath phantomjs-windows"
            cp phantomjs-windows/phantomjs-2.1.1-windows/bin/phantomjs.exe ./phantomjs.exe
          elif [[ "$RUNNER_OS" == "Linux" ]]; then
            echo "Downloading PhantomJS for Linux"
            curl -L "$LINUX_URL" -o phantomjs-linux.tar.bz2
            tar xjf phantomjs-linux.tar.bz2
            cp phantomjs-2.1.1-linux-x86_64/bin/phantomjs ./phantomjs
            chmod +x phantomjs
          else
            echo "Downloading PhantomJS for macOS"
            curl -L "$MAC_URL" -o phantomjs-macos.zip
            unzip phantomjs-macos.zip
            cp phantomjs-2.1.1-macosx/bin/phantomjs ./phantomjs
            chmod +x phantomjs
          fi

      - name: Update Info.plist version (macOS only)
        if: startsWith(matrix.os, 'macos')
        shell: bash
        run: |
          VERSION="${{ github.event.inputs.tag }}"
          /usr/libexec/PlistBuddy -c "Set :CFBundleShortVersionString $VERSION" Info.plist
          /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $VERSION" Info.plist

      - name: Build application
        shell: bash
        run: |
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            ICON="ytget_gui/icon.icns"
            APP_NAME="YTGet"
            pyinstaller --noconfirm --onedir --windowed \
              --name "$APP_NAME" \
              --icon "$ICON" \
              --clean --noupx \
              --version-file "version_info.txt" \
              --osx-bundle-identifier "com.erfannamira.ytget" \
              --hidden-import "PySide6.QtCore" \
              --hidden-import "PySide6.QtGui" \
              --hidden-import "PySide6.QtWidgets" \
              --hidden-import "requests" \
              --hidden-import "mutagen" \
              --hidden-import "PIL" \
              --hidden-import "webbrowser" \
              --hidden-import "mutagen.id3" \
              --hidden-import "mutagen.flac" \
              --hidden-import "browser_cookie3" \
              --hidden-import "browser_cookie3.chrome" \
              --hidden-import "browser_cookie3.firefox" \
              --hidden-import "browser_cookie3.edge" \
              --hidden-import "browser_cookie3.opera" \
              --hidden-import "browser_cookie3.common" \
              --hidden-import "browser_cookie3.safari" \
              --hidden-import "browser_cookie3.utils" \
              --add-data "ytget_gui:ytget_gui" \
              --add-data "ytget_gui/icon.icns:." \
              --add-data "ffmpeg:." \
              --add-data "ffprobe:." \
              --add-data "phantomjs:." \
              ytget_gui/main.py
            cp Info.plist "dist/$APP_NAME.app/Contents/Info.plist"
          else
            ICON="ytget_gui/icon.ico"
            pyinstaller --noconfirm --onedir --windowed \
              --name "YTGet" \
              --icon "$ICON" \
              --clean --noupx \
              --version-file "version_info.txt" \
              --hidden-import "PySide6.QtCore" \
              --hidden-import "PySide6.QtGui" \
              --hidden-import "PySide6.QtWidgets" \
              --hidden-import "requests" \
              --hidden-import "mutagen" \
              --hidden-import "PIL" \
              --hidden-import "webbrowser" \
              --hidden-import "mutagen.id3" \
              --hidden-import "mutagen.flac" \
              --hidden-import "browser_cookie3" \
              --hidden-import "browser_cookie3.chrome" \
              --hidden-import "browser_cookie3.firefox" \
              --hidden-import "browser_cookie3.edge" \
              --hidden-import "browser_cookie3.opera" \
              --hidden-import "browser_cookie3.common" \  
              --hidden-import "browser_cookie3.safari" \
              --hidden-import "browser_cookie3.utils" \              
              --add-data "ytget_gui:ytget_gui" \
              --add-data "ytget_gui/icon.ico:." \
              --add-data "yt-dlp${{ runner.os == 'Windows' && '.exe' || '' }}:." \
              --add-data "ffmpeg${{ runner.os == 'Windows' && '.exe' || '' }}:." \
              --add-data "ffprobe${{ runner.os == 'Windows' && '.exe' || '' }}:." \
              --add-data "phantomjs${{ runner.os == 'Windows' && '.exe' || '' }}:." \
              ytget_gui/main.py
          fi

      - name: Smoke test (macOS only)
        if: startsWith(matrix.os, 'macos')
        shell: bash
        run: |
          EXEC="./dist/YTGet.app/Contents/MacOS/YTGet"
          if [ ! -f "$EXEC" ]; then
            echo "❌ $EXEC not found"; exit 1
          fi
          "$EXEC" --version

      - name: Package build
        shell: bash
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            powershell Compress-Archive -Path dist/YTGet -DestinationPath YTGet-windows.zip -CompressionLevel Optimal
          elif [[ "$RUNNER_OS" == "Linux" ]]; then
            tar czf YTGet-linux.tar.gz -C dist YTGet
          else
            cd dist
            if [[ "${{ matrix.arch }}" == "arm64" ]]; then
              tar czf YTGet-macOS-arm64.tar.gz YTGet.app
            else
              tar czf YTGet-macOS-x86_64.tar.gz YTGet.app
            fi
            cd ..
          fi

      - name: Generate SHA-256 checksum
        shell: bash
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            certutil -hashfile YTGet-windows.zip SHA256 > YTGet-windows.sha256
          elif [[ "$RUNNER_OS" == "Linux" ]]; then
            shasum -a 256 YTGet-linux.tar.gz > YTGet-linux.sha256
          else
            if [[ "${{ matrix.arch }}" == "arm64" ]]; then
              shasum -a 256 dist/YTGet-macOS-arm64.tar.gz > dist/YTGet-macOS-arm64.sha256
            else
              shasum -a 256 dist/YTGet-macOS-x86_64.tar.gz > dist/YTGet-macOS-x86_64.sha256
            fi
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            YTGet-*.*
            dist/YTGet-*.tar.gz
            dist/YTGet-*.sha256

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download **all** artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.tag || github.ref_name }}
          name: "${{ github.event.inputs.tag || github.ref_name }}"
          body_path: RELEASE_NOTES.md
          files: artifacts/**/*  
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
